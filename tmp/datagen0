; Running top pre-processing
; running simplify
; simplify: prd: 2, cls rm: 2, cls add: 0, args rm: 0
; running arg_reduce
; arg_reduce: did nothing
; running one_rhs
;   unfolding main@verifier.error.loopexit
;   unfolding main@.lr.ph.preheader
; one_rhs: prd: 1, cls rm: 1, cls add: 0, args rm: 0
; running one_lhs
;   unfolding main@verifier.error.loopexit
;   unfolding main@verifier.error
; one_lhs: prd: 2, cls rm: 3, cls add: 0, args rm: 0
; running arg_reduce
; arg_reduce: did nothing
; running one_rhs
; one_rhs: did nothing
; running one_lhs
; one_lhs: did nothing
; running const_prop
; const_prop: did nothing
; running cfg_red
; cfg_red: did nothing
; running strict_neg
; strict_neg: prd: 1, cls rm: 0, cls add: 0, args rm: 0
; Starting learning...
running a teacher
;   initial candidates:
;     main@.lr.ph: true
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
; broadcasting...
; done broadcasting...
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | main@.lr.ph only has negative (1) and unclassified (0) data
; ice | legal check ok, assuming everything negative

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   false
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 1, neg: 1, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (not (= (+ (* (- 1) v_0) v_2) 0))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 1, neg: 5, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (>= v_0 1)
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 1, neg: 6, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (and (>= v_1 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 1, neg: 7, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: true,
;
; ice | working on predicate main@.lr.ph (pos: 3, neg: 7, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (and (>= (+ v_1 v_3) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 3, neg: 10, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (and (>= v_1 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (not (= (+ (* (- 1) v_0) v_2) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 3, neg: 13, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 3, neg: 15, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (= (+ (* (- 1) v_1) v_2) 0) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: true,
;
; ice | working on predicate main@.lr.ph (pos: 5, neg: 16, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (>= v_1 1)) (and (= v_1 0) (>= (* (- 1) v_2) 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      true,
; ice |   sorted:      true,
; ice |   skip_prelim: true,
;
; ice | working on predicate main@.lr.ph (pos: 5, neg: 18, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (not (= (+ (* (- 1) v_0) v_2) 0)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: true,
;
; ice | working on predicate main@.lr.ph (pos: 7, neg: 19, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (= (+ (* (- 1) v_1) v_2) 0) (>= v_1 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= v_1 0) (>= v_3 0) (>= (+ v_0 (* (- 1) v_3)) 0) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (= (+ 1 v_1 (* (- 1) v_3)) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: true,
;
; ice | working on predicate main@.lr.ph (pos: 9, neg: 19, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (= (+ (* (- 1) v_1) v_2) 0) (>= v_1 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (* (- 1) v_2) 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (>= v_1 1) (not (= (+ (* (- 1) v_1) v_2) 0))) (and (>= v_3 0) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (>= v_1 1) (not (= (+ (* (- 1) v_1) v_2) 0)) (= (+ 1 v_1 (* (- 1) v_3)) 0) (>= v_2 1)) (and (>= v_3 0) (>= (+ v_0 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (>= v_1 1) (not (= (+ (* (- 1) v_1) v_2) 0)) (= (+ v_0 v_1 v_2 v_3 (- 11)) 0) (>= v_2 1)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      true,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 9, neg: 21, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (= (+ (* (- 1) v_1) v_2) 0) (= (+ v_0 (* (- 1) v_3)) 0) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (= (+ (- 1) v_1) 0)) (and (= (+ v_0 (* (- 1) v_3)) 0) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 2)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 9, neg: 23, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (= (+ v_0 v_1 v_2 (- 7)) 0)) (and (= (+ (* (- 1) v_1) v_2) 0) (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ v_0 v_1 v_2 (- 7)) 0)) (>= v_0 1)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 11, neg: 24, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (= (+ (* (- 1) v_1) v_2) 0) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1)) (and (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (not (= (+ v_0 (- 4)) 0))) (and (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (= (+ v_0 (- 4)) 0) (>= v_1 2) (= (+ v_0 v_1 v_2 (- 7)) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: true,
;
; ice | working on predicate main@.lr.ph (pos: 12, neg: 26, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (= (+ (* (- 1) v_1) v_2) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1)) (and (= (+ v_0 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (= (+ v_0 v_1 v_2 v_3 (- 11)) 0) (not (= (+ v_2 (* (- 1) v_3)) 0))) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (not (= (+ v_2 (* (- 1) v_3)) 0)) (not (= (+ v_0 (* (- 1) v_3)) 0))))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 12, neg: 28, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (= (+ (* (- 1) v_1) v_2) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_2 1)) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (>= v_2 1) (not (= (+ v_0 v_1 v_2 (- 7)) 0)) (not (= (+ v_0 (- 4)) 0)) (not (= (+ v_2 (* (- 1) v_3)) 0))) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (= (+ v_0 v_1 v_2 (- 7)) 0) (>= v_2 1) (not (= (+ v_2 (* (- 1) v_3)) 0))))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
; ) constraints (
; ) constraint map(
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 12, neg: 30, unc: 0)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (= (+ (* (- 1) v_1) v_2) 0) (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_2 1)) (and (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (= (+ v_0 (- 4)) 0) (>= v_1 2) (= (+ v_0 v_1 v_2 v_3 (- 11)) 0) (>= v_2 1) (not (= (+ v_2 (* (- 1) v_3)) 0))) (and (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (>= v_2 1) (not (= (+ v_0 (- 4)) 0)) (not (= (+ v_2 (* (- 1) v_3)) 0))))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 12, neg: 30, unc: 2)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (>= (+ v_0 (* (- 1) v_1) (* (- 1) v_2) v_3) 2)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= (+ v_0 (* (- 1) v_1) (* (- 1) v_2) v_3) 2)) (and (= (+ (* (- 1) v_1) v_2) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_2 1) (>= (+ v_0 (* (- 1) v_1) (* (- 1) v_2) v_3) 2)) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (= (+ v_0 v_1 v_2 (- 7)) 0) (>= v_2 1) (not (= (+ v_2 (* (- 1) v_3)) 0)) (>= (+ v_0 (* (- 1) v_1) (* (- 1) v_2) v_3) 2)) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (>= v_2 1) (not (= (+ v_0 v_1 v_2 (- 7)) 0)) (not (= (+ v_0 (- 4)) 0)) (not (= (+ v_2 (* (- 1) v_3)) 0)) (>= (+ v_0 (* (- 1) v_1) (* (- 1) v_2) v_3) 2)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      true,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 12, neg: 30, unc: 4)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= (+ v_0 (* (- 1) v_1) (* (- 1) v_2) v_3) 2)) (and (= (+ (* (- 1) v_1) v_2) 0) (>= v_1 0) (>= v_3 0) (>= (+ v_0 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= (+ v_0 (* (- 1) v_1) (* (- 1) v_2) v_3) 2)) (and (>= v_3 0) (>= (+ v_0 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (not (= (+ v_0 (- 4)) 0)) (not (= (+ v_2 (* (- 1) v_3)) 0)) (>= (+ v_0 (* (- 1) v_1) (* (- 1) v_2) v_3) 2) (not (= (+ v_0 v_1 v_2 v_3 (- 11)) 0))) (and (>= v_3 0) (>= (+ v_0 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (* (- 1) v_1) v_2) 0)) (>= v_1 2) (= (+ v_0 v_1 v_2 v_3 (- 11)) 0) (>= (+ v_0 (* (- 1) v_1) (* (- 1) v_2) v_3) 2)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 12, neg: 30, unc: 6)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_2 1) (= (+ (* (- 1) v_0) v_1 v_2 v_3 (- 2)) 0)) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 2) (>= v_2 1) (= (+ (* (- 1) v_0) v_1 v_2 v_3 (- 3)) 0) (not (= (+ (* (- 1) v_0) v_1 v_2 v_3 (- 2)) 0))))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 31, unc: 6)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 2) (= (+ (- 1) v_2) 0)) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (= (+ (- 1) v_1) 0) (>= v_0 1) (= (+ (- 1) v_2) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 33, unc: 6)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= v_3 0) (>= (+ v_0 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1) (= (+ (- 1) v_2) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: true,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 33, unc: 8)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1) (>= v_0 1) (= (+ (- 1) v_2) 0)) (and (= (+ (* (- 1) v_1) v_2) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1) (not (= (+ (- 1) v_2) 0))))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 35, unc: 8)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1) (= (+ (- 1) v_2) 0)) (and (= (+ (* (- 1) v_1) v_2) 0) (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (- 1) v_2) 0))))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: true,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 37, unc: 8)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1) (>= (+ v_0 v_1 (* (- 1) v_2)) 4)) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1) (>= (+ (* (- 1) v_0) (* (- 1) v_1) v_2) (- 3)) (= (+ v_0 v_1 v_2 v_3 (- 8)) 0) (not (= (+ (* (- 1) v_0) v_1 v_2 v_3 (- 3)) 0))))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 39, unc: 8)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= (* (- 1) v_1) (- 1)) (= (+ v_0 v_1 v_2 v_3 (- 8)) 0)) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 2) (= (+ (- 1) v_2) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 39, unc: 10)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ v_1 (* (- 1) v_2)) 1) (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (= (+ v_0 v_1 v_2 (- 5)) 0) (>= (+ (* (- 1) v_1) v_2) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
;   (main@.lr.ph 4 0 1 4)
;   (main@.lr.ph 2 0 5 1)
;   (main@.lr.ph 2 (- 1) 4 1)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 42, unc: 10)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 2) (= (+ (- 1) v_2) 0)) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (= (+ v_0 (- 3)) 0) (>= (* (- 1) v_1) (- 1)) (= (+ v_0 v_1 v_2 v_3 (- 8)) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
;   (main@.lr.ph 4 0 1 4)
;   (main@.lr.ph 2 0 5 1)
;   (main@.lr.ph 2 (- 1) 4 1)
;   (main@.lr.ph 2 3 2 4)
;   (main@.lr.ph 2 2 1 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 44, unc: 10)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= (+ (* (- 1) v_0) (* (- 1) v_1) v_2) (- 3)) (= (+ v_0 v_1 v_2 v_3 (- 8)) 0)) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= (+ v_0 v_1 (* (- 1) v_2)) 4)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
;   (main@.lr.ph 4 0 1 4)
;   (main@.lr.ph 2 0 5 1)
;   (main@.lr.ph 2 (- 1) 4 1)
;   (main@.lr.ph 2 3 2 4)
;   (main@.lr.ph 2 2 1 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
;   5 | (main@.lr.ph 4 0 1 3) => (main@.lr.ph 4 1 2 3)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
;   (main@.lr.ph 4 1 2 3) -> 5
;   (main@.lr.ph 4 0 1 3) -> 5
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 44, unc: 12)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= (+ v_0 v_1 (* (- 1) v_2)) 4)) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ v_0 (- 4)) 0)) (>= (+ (* (- 1) v_0) (* (- 1) v_1) v_2) (- 3)) (= (+ v_0 v_1 v_2 v_3 (- 8)) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
;   (main@.lr.ph 4 0 1 4)
;   (main@.lr.ph 2 0 5 1)
;   (main@.lr.ph 2 (- 1) 4 1)
;   (main@.lr.ph 2 3 2 4)
;   (main@.lr.ph 2 2 1 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
;   5 | (main@.lr.ph 4 0 1 3) => (main@.lr.ph 4 1 2 3)
;   6 | (main@.lr.ph 3 (- 3) 8 0) => (main@.lr.ph 3 (- 2) 9 0)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
;   (main@.lr.ph 4 1 2 3) -> 5
;   (main@.lr.ph 4 0 1 3) -> 5
;   (main@.lr.ph 3 (- 2) 9 0) -> 6
;   (main@.lr.ph 3 (- 3) 8 0) -> 6
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 44, unc: 14)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= (+ v_0 v_1 (* (- 1) v_2)) 4)) (and (>= (+ v_0 v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1) (>= (+ (* (- 1) v_0) (* (- 1) v_1) v_2) (- 3)) (= (+ v_0 v_1 v_2 v_3 (- 8)) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
;   (main@.lr.ph 4 0 1 4)
;   (main@.lr.ph 2 0 5 1)
;   (main@.lr.ph 2 (- 1) 4 1)
;   (main@.lr.ph 2 3 2 4)
;   (main@.lr.ph 2 2 1 4)
;   (main@.lr.ph 2 2 3 3)
;   (main@.lr.ph 2 1 2 3)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
;   5 | (main@.lr.ph 4 0 1 3) => (main@.lr.ph 4 1 2 3)
;   6 | (main@.lr.ph 3 (- 3) 8 0) => (main@.lr.ph 3 (- 2) 9 0)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
;   (main@.lr.ph 4 1 2 3) -> 5
;   (main@.lr.ph 4 0 1 3) -> 5
;   (main@.lr.ph 3 (- 2) 9 0) -> 6
;   (main@.lr.ph 3 (- 3) 8 0) -> 6
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: true,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 46, unc: 14)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_0 3) (>= (+ v_1 (* (- 1) v_2)) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
;   (main@.lr.ph 4 0 1 4)
;   (main@.lr.ph 2 0 5 1)
;   (main@.lr.ph 2 (- 1) 4 1)
;   (main@.lr.ph 2 3 2 4)
;   (main@.lr.ph 2 2 1 4)
;   (main@.lr.ph 2 2 3 3)
;   (main@.lr.ph 2 1 2 3)
;   (main@.lr.ph 3 3 3 4)
;   (main@.lr.ph 3 2 2 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
;   5 | (main@.lr.ph 4 0 1 3) => (main@.lr.ph 4 1 2 3)
;   6 | (main@.lr.ph 3 (- 3) 8 0) => (main@.lr.ph 3 (- 2) 9 0)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
;   (main@.lr.ph 4 1 2 3) -> 5
;   (main@.lr.ph 4 0 1 3) -> 5
;   (main@.lr.ph 3 (- 2) 9 0) -> 6
;   (main@.lr.ph 3 (- 3) 8 0) -> 6
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 48, unc: 14)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1))) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (= (+ (- 1) v_2) 0) (>= v_0 3) (>= (+ v_1 (* (- 1) v_2)) 0)) (and (= (+ v_0 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (not (= (+ (- 1) v_2) 0)) (>= v_0 3) (>= (+ v_1 (* (- 1) v_2)) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
;   (main@.lr.ph 4 0 1 4)
;   (main@.lr.ph 2 0 5 1)
;   (main@.lr.ph 2 (- 1) 4 1)
;   (main@.lr.ph 2 3 2 4)
;   (main@.lr.ph 2 2 1 4)
;   (main@.lr.ph 2 2 3 3)
;   (main@.lr.ph 2 1 2 3)
;   (main@.lr.ph 3 3 3 4)
;   (main@.lr.ph 3 2 2 4)
;   (main@.lr.ph 3 1 1 4)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
;   5 | (main@.lr.ph 4 0 1 3) => (main@.lr.ph 4 1 2 3)
;   6 | (main@.lr.ph 3 (- 3) 8 0) => (main@.lr.ph 3 (- 2) 9 0)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
;   (main@.lr.ph 4 1 2 3) -> 5
;   (main@.lr.ph 4 0 1 3) -> 5
;   (main@.lr.ph 3 (- 2) 9 0) -> 6
;   (main@.lr.ph 3 (- 3) 8 0) -> 6
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 49, unc: 14)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ v_1 (* (- 1) v_2)) 1) (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_0 3)) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1) (>= v_0 3) (= (+ v_0 v_1 v_2 v_3 (- 8)) 0) (>= (+ (* (- 1) v_1) v_2) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
;   (main@.lr.ph 4 0 1 4)
;   (main@.lr.ph 2 0 5 1)
;   (main@.lr.ph 2 (- 1) 4 1)
;   (main@.lr.ph 2 3 2 4)
;   (main@.lr.ph 2 2 1 4)
;   (main@.lr.ph 2 2 3 3)
;   (main@.lr.ph 2 1 2 3)
;   (main@.lr.ph 3 3 3 4)
;   (main@.lr.ph 3 2 2 4)
;   (main@.lr.ph 3 1 1 4)
;   (main@.lr.ph 3 4 3 5)
;   (main@.lr.ph 3 3 2 5)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | (main@.lr.ph 4 1 1 4) => (main@.lr.ph 4 2 2 4)
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
;   5 | (main@.lr.ph 4 0 1 3) => (main@.lr.ph 4 1 2 3)
;   6 | (main@.lr.ph 3 (- 3) 8 0) => (main@.lr.ph 3 (- 2) 9 0)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 4 2 2 4) -> 3
;   (main@.lr.ph 4 1 1 4) -> 3
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
;   (main@.lr.ph 4 1 2 3) -> 5
;   (main@.lr.ph 4 0 1 3) -> 5
;   (main@.lr.ph 3 (- 2) 9 0) -> 6
;   (main@.lr.ph 3 (- 3) 8 0) -> 6
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      true,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 14, neg: 51, unc: 14)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (or (and (>= v_1 0) (= v_2 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0)) (and (>= (+ v_1 (* (- 1) v_3)) (- 1)) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1))) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_0 3) (>= (+ v_0 v_1 (* (- 1) v_2) (* (- 1) v_3)) 1)) (and (>= (+ (* (- 1) v_1) v_3) 2) (or (>= (* (- 1) v_1) 1) (not (= v_2 0)) (>= (* (- 1) v_3) 1) (>= (+ v_1 (* (- 1) v_3)) 0) (>= (+ (* (- 1) v_0) v_3) 1)) (>= v_1 1) (>= v_0 3) (= (+ v_0 v_1 v_2 v_3 (- 8)) 0) (>= (+ (* (- 1) v_0) (* (- 1) v_1) v_2 v_3) 0)))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; all learning data:
; pos (
;   (main@.lr.ph 1 0 0 1)
;   (main@.lr.ph 2 1 1 2)
;   (main@.lr.ph 2 0 0 2)
;   (main@.lr.ph 3 2 1 3)
;   (main@.lr.ph 3 1 0 3)
;   (main@.lr.ph 3 1 1 3)
;   (main@.lr.ph 3 0 0 3)
;   (main@.lr.ph 4 2 1 4)
;   (main@.lr.ph 4 1 0 4)
;   (main@.lr.ph 5 2 1 4)
;   (main@.lr.ph 5 1 0 4)
;   (main@.lr.ph 4 3 2 4)
;   (main@.lr.ph 5 3 1 5)
;   (main@.lr.ph 5 2 0 5)
;   (main@.lr.ph 4 2 2 4)
;   (main@.lr.ph 4 1 1 4)
;   (main@.lr.ph 4 0 0 4)
; ) neg (
;   (main@.lr.ph (- 1) (- 1) (- 1) 0)
;   (main@.lr.ph 0 (- 1) 1 0)
;   (main@.lr.ph (- 1) (- 2) (- 2) 0)
;   (main@.lr.ph 0 (- 1) 0 0)
;   (main@.lr.ph 0 (- 2) (- 1) 0)
;   (main@.lr.ph 1 (- 1) 1 0)
;   (main@.lr.ph 1 0 1 1)
;   (main@.lr.ph 1 (- 1) 0 1)
;   (main@.lr.ph 0 0 0 1)
;   (main@.lr.ph 0 (- 1) (- 1) 1)
;   (main@.lr.ph 1 0 2 1)
;   (main@.lr.ph 2 1 2 2)
;   (main@.lr.ph 2 0 1 2)
;   (main@.lr.ph 0 2 0 3)
;   (main@.lr.ph 0 1 (- 1) 3)
;   (main@.lr.ph 1 1 1 1)
;   (main@.lr.ph 3 2 3 3)
;   (main@.lr.ph 3 1 2 3)
;   (main@.lr.ph 1 1 2 2)
;   (main@.lr.ph 4 2 4 3)
;   (main@.lr.ph 4 1 3 3)
;   (main@.lr.ph 4 3 4 4)
;   (main@.lr.ph 4 2 3 4)
;   (main@.lr.ph 4 1 2 4)
;   (main@.lr.ph 5 3 5 4)
;   (main@.lr.ph 5 2 4 4)
;   (main@.lr.ph (- 1) 3 (- 1) 4)
;   (main@.lr.ph (- 1) 2 (- 2) 4)
;   (main@.lr.ph 0 3 6 4)
;   (main@.lr.ph 0 2 5 4)
;   (main@.lr.ph 1 0 1 2)
;   (main@.lr.ph 0 3 2 4)
;   (main@.lr.ph 0 2 1 4)
;   (main@.lr.ph 1 2 2 3)
;   (main@.lr.ph 1 1 1 3)
;   (main@.lr.ph 2 2 2 3)
;   (main@.lr.ph 2 1 1 3)
;   (main@.lr.ph (- 6) 8 (- 1) 9)
;   (main@.lr.ph (- 6) 7 (- 2) 9)
;   (main@.lr.ph 4 0 1 4)
;   (main@.lr.ph 2 0 5 1)
;   (main@.lr.ph 2 (- 1) 4 1)
;   (main@.lr.ph 2 3 2 4)
;   (main@.lr.ph 2 2 1 4)
;   (main@.lr.ph 2 2 3 3)
;   (main@.lr.ph 2 1 2 3)
;   (main@.lr.ph 3 3 3 4)
;   (main@.lr.ph 3 2 2 4)
;   (main@.lr.ph 3 1 1 4)
;   (main@.lr.ph 3 4 3 5)
;   (main@.lr.ph 3 3 2 5)
; ) constraints (
;   0 | (main@.lr.ph 5 2 4 6) => (main@.lr.ph 5 3 5 6)
;   1 | (main@.lr.ph 0 1 1 4) => (main@.lr.ph 0 2 2 4)
;   2 | (main@.lr.ph 5 2 6 5) => (main@.lr.ph 5 3 7 5)
;   3 | _
;   4 | (main@.lr.ph 12 (- 3) (- 1) 0) => (main@.lr.ph 12 (- 2) 0 0)
;   5 | (main@.lr.ph 4 0 1 3) => (main@.lr.ph 4 1 2 3)
;   6 | (main@.lr.ph 3 (- 3) 8 0) => (main@.lr.ph 3 (- 2) 9 0)
; ) constraint map(
;   (main@.lr.ph 5 3 5 6) -> 0
;   (main@.lr.ph 5 2 4 6) -> 0
;   (main@.lr.ph 0 2 2 4) -> 1
;   (main@.lr.ph 0 1 1 4) -> 1
;   (main@.lr.ph 5 3 7 5) -> 2
;   (main@.lr.ph 5 2 6 5) -> 2
;   (main@.lr.ph 12 (- 2) 0 0) -> 4
;   (main@.lr.ph 12 (- 3) (- 1) 0) -> 4
;   (main@.lr.ph 4 1 2 3) -> 5
;   (main@.lr.ph 4 0 1 3) -> 5
;   (main@.lr.ph 3 (- 2) 9 0) -> 6
;   (main@.lr.ph 3 (- 3) 8 0) -> 6
; ) positive examples staged (
; ) negative examples staged (
; ) modded (
; ) neg (
; )
;
; ice | starting learning
; ice |   simple:      false,
; ice |   sorted:      false,
; ice |   skip_prelim: false,
;
; ice | working on predicate main@.lr.ph (pos: 17, neg: 51, unc: 12)

; Current candidate(s) from ice learner:
; main@.lr.ph:
;   (and (>= v_1 0) (>= v_3 0) (>= (+ (* (- 1) v_1) v_3) 1) (>= (+ v_0 (* (- 1) v_3)) 0) (or (>= (+ (* (- 1) v_1) v_3) 2) (>= (+ v_0 (* (- 1) v_2)) 1)) (>= (+ v_1 (* (- 1) v_2)) 0))
; looking for counterexamples in positive clauses (1)...
; looking for counterexamples in strict negative clauses (1)...
; looking for counterexamples in non-strict negative clauses (0)...
; looking for counterexamples in implication clauses (1)...
; sat

sat
